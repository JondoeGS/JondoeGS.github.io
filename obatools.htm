<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>OneBit Adventure Tools</title>
  <link rel="stylesheet" href="css/obatools.css" />
</head>
<body>

  <!-- Corner menu -->
  <div id="menuToggle" onclick="toggleMenu()">â˜°</div>
  <div id="menu">
    <table>
      <tbody>
        <tr><th>Tabs</th></tr>
        <tr><td><a href="#" onclick="showTab('equipmentTab')">Equipment Stats</a></td></tr>
        <tr><td><a href="#" onclick="showTab('glacierTab')">Glacier Calc</a></td></tr>
        <tr><td><a href="#" onclick="showTab('archerTab')">Archer Optimizer</a></td></tr>
      </tbody>
    </table>
  </div>

  <h2>OneBit Adventure Tools</h2>

  <!-- Tab Containers -->

  <!-- Equipment Lookup -->
  <div id="equipmentTab" class="tab-content" style="display: block;">
       <h2>Equipment Stats Look-up</h2>
    <table id="selectOptions">

    <tr><td>    <!-- Equipment drop down menu -->
        <label for="equipment">Equipment:</label>
    </td><td>
        <select id="equipment">
 
    <!-- Melee options group -->
 
    <optgroup label="Melee">
        <option value="Axe">Axe</option>
        <option value="BattleAxe">Battle Axe</option>
        <option value="ChargedSpear">Charged Spear</option>
        <option value="Cleaver">Cleaver</option>
        <option value="Crusher">Crusher</option>
        <option value="Dagger">Dagger</option>
        <option value="DivineBlade">Divine Blade</option>
        <option value="Gladius">Gladius</option>
        <option value="GreaterPickaxe">Greater Pickaxe</option>
        <option value="Greatsword">Greatsword</option>
        <option value="JaggedBlade">Jagged Blade</option>
        <option value="Longsword">Longsword</option>
        <option value="Mallet">Mallet</option>
        <option value="Pickaxe">Pickaxe</option>
        <option value="Scimitar">Scimitar</option>
        <option value="Slicer">Slicer</option>
        <option value="Smasher">Smasher</option>
        <option value="Splitter">Splitter</option>
    </optgroup>
 
    <!-- Magic options group -->
 
    <optgroup label="Magic">
        <option value="BeholderWand">Beholder Wand</option>
        <option value="CrystalStaff">Crystal Staff</option>
        <option value="FrailStaff">Frail Staff</option>
        <option value="JadeStaff">Jade Staff</option>
        <option value="LargeRod">Large Rod</option>
        <option value="LongStaff">Long Staff</option>
        <option value="MagicStick">Magic Stick</option>
        <option value="NemesisOrb">Nemesis Orb</option>
        <option value="Scepter">Scepter</option>
        <option value="SpiritStaff">Spirit Staff</option>
    </optgroup>
 
    <!-- Ranged options group -->
 
    <optgroup label="Ranged">
        <option value="Fang">Fang</option>
        <option value="ColossalBow">Colossal Bow</option>
        <option value="Gnasher">Gnasher</option>
        <option value="Kunai">Kunai</option>
        <option value="QuickBow">Quick Bow</option>
        <option value="RecurveBow">Recurve Bow</option>
        <option value="Shuriken">Shuriken</option>
        <option value="Tendril">Tendril</option>
        <option value="Tomahawk">Tomahawk</option>
        <option value="Tribow">Tri-bow</option>
        <option value="TrinityBow">Trinity Bow</option>
        <option value="Warbow">Warbow</option>
    </optgroup>
 
    <!-- Chestpiece options group -->
    <optgroup label="Chestpiece">
        <option value="BrodC">Brod-C</option>
        <option value="Cloak">Cloak</option>
        <option value="DefenderC">Defender-C</option>
        <option value="DivingC">Diving-C</option>
        <option value="DragonC">Dragon-C</option>
        <option value="FanaticC">Fanatic-C</option>
        <option value="GauntletC">Gauntlet-C</option>
        <option value="GreedC">Greed-C</option>
        <option value="HeavyC">Heavy-C</option>
        <option value="MagicianC">Magician-C</option>
        <option value="MajesticC">Majestic-C</option>
        <option value="MinerC">Miner-C</option>
        <option value="MonsterC">Monster-C</option>
        <option value="RoninC">Ronin-C</option>
        <option value="RusticC">Rustic-C</option>
        <option value="SentinelC">Sentinel-C</option>
        <option value="SerpentC">Serpent-C</option>
        <option value="WarlockC">Warlock-C</option>
    </optgroup>
 
    <!-- Helmet options group -->
    <optgroup label="Helmet">
        <option value="BrodH">Brod-H</option>
        <option value="DefenderH">Defender-H</option>
        <option value="DivingH">Diving-H</option>
        <option value="DragonH">Dragon-H</option>
        <option value="FanaticH">Fanatic-H</option>
        <option value="FlameH">Flame-H</option>
        <option value="GauntletH">Gauntlet-H</option>
        <option value="GreedH">Greed-H</option>
        <option value="GustafsMask">Gustaf's Mask</option>
        <option value="HeavyH">Heavy-H</option>
        <option value="MagicianH">Magician-H</option>
        <option value="MajesticH">Majestic-H</option>
        <option value="MinerH">Miner-H</option>
        <option value="MonsterH">Monster-H</option>
        <option value="RoninH">Ronin-H</option>
        <option value="RusticH">Rustic-H</option>
        <option value="SentinelH">Sentinel-H</option>
        <option value="SerpentH">Serpent-H</option>
        <option value="SnowHat">Snow Hat</option>
        <option value="WarlockH">Warlock-H</option>
    </optgroup>
</select>
    </td></tr>
 
    <tr><td>    <!-- Rarity drop down menu -->
        <label for="rarity">Rarity:</label>
    </td><td>
    <select id="rarity">
        <option value="Basic">Basic</option>
        <option value="Common">Common</option>
        <option value="Uncommon">Uncommon</option>
        <option value="Epic">Epic</option>
        <option value="Legendary">Legendary</option>
        <option value="Rogue">Rogue</option>
        <option value="Mythic">Mythic</option>
        <option value="Ancient">Ancient</option>
        <option value="Galactic">Galactic</option>
    </select>
    </td></tr>

    <tr><td>    <!-- Level drop down menu -->
        <label for="level">Level:</label>
    </td><td>
    <!-- Script to populate kept breaking, so levels are hardcoded in -->
    <select id="level">
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
        <option value="6">6</option>
        <option value="7">7</option>
        <option value="8">8</option>
        <option value="9">9</option>
        <option value="10">10</option>
        <option value="11">11</option>
        <option value="12">12</option>
        <option value="13">13</option>
        <option value="14">14</option>
        <option value="15">15</option>
        <option value="16">16</option>
        <option value="17">17</option>
        <option value="18">18</option>
        <option value="19">19</option>
        <option value="20">20</option>
        <option value="21">21</option>
        <option value="22">22</option>
        <option value="23">23</option>
        <option value="24">24</option>
        <option value="25">25</option>
        <option value="26">26</option>
        <option value="27">27</option>
        <option value="28">28</option>
        <option value="29">29</option>
        <option value="30">30</option>
        <option value="31">31</option>
        <option value="32">32</option>
        <option value="33">33</option>
        <option value="34">34</option>
        <option value="35">35</option>
        <option value="36">36</option>
        <option value="37">37</option>
        <option value="38">38</option>
        <option value="39">39</option>
        <option value="40">40</option>
        <option value="41">41</option>
        <option value="42">42</option>
        <option value="43">43</option>
        <option value="44">44</option>
        <option value="45">45</option>
        <option value="46">46</option>
        <option value="47">47</option>
        <option value="48">48</option>
        <option value="49">49</option>
        <option value="50">50</option>
        <option value="51">51</option>
        <option value="52">52</option>
        <option value="53">53</option>
        <option value="54">54</option>
        <option value="55">55</option>
        <option value="56">56</option>
        <option value="57">57</option>
        <option value="58">58</option>
        <option value="59">59</option>
        <option value="60">60</option>
        <option value="61">61</option>
        <option value="62">62</option>
        <option value="63">63</option>
        <option value="64">64</option>
        <option value="65">65</option>
        <option value="66">66</option>
        <option value="67">67</option>
        <option value="68">68</option>
        <option value="69">69</option>
        <option value="70">70</option>
        <option value="71">71</option>
        <option value="72">72</option>
        <option value="73">73</option>
        <option value="74">74</option>
        <option value="75">75</option>
        <option value="76">76</option>
        <option value="77">77</option>
        <option value="78">78</option>
        <option value="79">79</option>
        <option value="80">80</option>
        <option value="81">81</option>
        <option value="82">82</option>
        <option value="83">83</option>
        <option value="84">84</option>
        <option value="85">85</option>
        <option value="86">86</option>
        <option value="87">87</option>
        <option value="88">88</option>
        <option value="89">89</option>
        <option value="90">90</option>
        <option value="91">91</option>
        <option value="92">92</option>
        <option value="93">93</option>
        <option value="94">94</option>
        <option value="95">95</option>
        <option value="96">96</option>
        <option value="97">97</option>
        <option value="98">98</option>
        <option value="99">99</option>
        <option value="100">100</option>
        <option value="101">101</option>
        <option value="102">102</option>
        <option value="103">103</option>
        <option value="104">104</option>
        <option value="105">105</option>
        <option value="106">106</option>
        <option value="107">107</option>
        <option value="108">108</option>
        <option value="109">109</option>
        <option value="110">110</option>
    </select>
    </td></tr>

    </table>
 
    <!-- Results table -->
    <table id="Results">
        <thead>
            <tr>
                <th>Stat</th>
                <th>Minimum</th>
                <th>Maximum</th>
                <th>%</th>
            </tr>
        </thead>
        <tbody>
            <!-- Rows will be added dynamically here -->
        </tbody>
    </table>
 
<script src="js/equipment-data.js">

function updateResultsHeader() {
    const equipmentSelect = document.getElementById('equipment');
    const selectedEquipment = equipmentSelect.value;
    const resultTableHeader = document.querySelector('#Results thead');
    const resultTableBody = document.querySelector('#Results tbody');
 
    // Clear previous rows
    resultTableBody.innerHTML = '';
 
    // Reset header
    resultTableHeader.innerHTML = `<tr>
        <th>Stat</th>
        <th>Minimum</th>
        <th>Maximum</th>
        <th>%</th>
    </tr>`;
 
    // List of stats that should always display as percentages
    const percentageStats = [
        "Critical Chance", "Critical Damage", "Lifesteal", "Burn Chance", 
        "Bleed Chance", "Berserk Damage", "Stun Chance", "Armor", "Hp Efficiency", 
        "Double Ore", "Endure", "Poison Reduction", "Triple Ore", 
        "Knockback", "Life Heal", "Mana Efficiency", "Paralysis Chance", 
        "Cast Surge", "Ore Explorer", "Reflect Chance", "Spell Damage", 
        "Elite Damage", "Boss Damage", "Poison Chance", "Quad Ore", "Max Barrier", 
        "Haste Damage", "Self Damage", "Spellcast Marty", "Free Spellcast", 
        "Haste Chance", "Double Item Chance", "Mana %", "Pull Chance", 
        "Stun Resistance", "Throw Damage", "Poison Damage", "Knockback Resistance", 
        "Oxygen Boost", "Water Breathing", "Panic Resist", "Recycle Throwable", "Hp %"
    ];
 
    // Get rarity value
    const rarity = getRarityValue();
 
    // Get level from dropdown
    const level = parseInt(document.getElementById('level').value);
 
    // Retrieve the selected equipment stats
    let equipment = (equipmentStats[selectedEquipment]?.stats) || [];
 
    if (equipment.length === 0) {
        resultTableBody.innerHTML = `<tr><td colspan="4">ERROR. Contact @jondoe on Discord.</td></tr>`;
        return; // Exit if no equipment found
    }

    equipment.forEach(item => {
    const stat = item.stat;
    const minresult = item.min + item.growth * level * rarity;
    const maxresult = item.max + item.growth * level * rarity;
    const isPercentage = percentageStats.includes(stat);
    const isRounded = roundStats.includes(stat);

    let displayMin = isRounded ? Math.round(minresult) : minresult.toFixed(2);
    let displayMax = isRounded ? Math.round(maxresult) : maxresult.toFixed(2);
    if (isPercentage) {
        displayMin += "%";
        displayMax += "%";
    }

    const row = document.createElement('tr');
    row.innerHTML = `
        <td>${stat}</td>
        <td>${displayMin}</td>
        <td>${displayMax}</td>
        <td>${isPercentage ? "âœ“" : ""}</td>
    `;
    resultTableBody.appendChild(row);
});

 
    // List of stats that should be rounded to whole numbers
    const roundStats = [
        "Health", 
        "Damage", 
        "Mana", 
        "Mp Damage", 
        "Extra Coin", 
        "Burn Damage", 
        "Bleed", 
        "+1 Stew Output", 
        "Multi-Atk", 
        "Quick Breaking", 
        "Unbinding", 
        "Range", 
        "Ricochet", 
        "Mining", 
        "Snow Day", 
        "Amount", 
        "Scatter", 
        "Sweeping", 
        "Looting", 
        "Coin Magnet", 
        "Piercing", 
        "Crit 3 Combo", 
        "Quick Hit 3", 
        "Crit 2 Combo", 
        "Knockback 3", 
        "Controller", 
        "Paralysis 3", 
        "Quick Hit 2", 
        "AOE"
    ];
 
    // Object defining minimum values for certain stats
    const minValues = {
        "Extra Coin": 1,
        "+1 Stew Output": 1,
        "Multi-Atk": 1,
        "Quick Breaking": 1,
        "Unbinding": 1,
        "Ricochet": 1,
        "Mining": 1,
        "Snow Day": 1,
        "Scatter": 1,
        "Sweeping": 1,
        "Looting": 1,
        "Coin Magnet": 1,
        "Piercing": 1,
        "Crit 3 Combo": 1,
        "Quick Hit 3": 1,
        "Crit Combo 2": 1,
        "Knockback 3": 1,
        "Controller": 1,
        "Paralysis 3": 1,
        "Quick Hit 2": 1,
        "AOE": 1
    };
 
    // Object defining maximum values for certain stats
    const maxValues = {
        "Critical Chance": 100,
        "Extra Coin": 1,
        "Lifesteal": 100,
        "Burn Chance": 100,
        "Bleed Chance": 100,
        "Berserk Damage": 300,
        "Stun Chance": 50,
        "Hp Efficiency": 65,
        "+1 Stew Output": 1,
        "Multi-Atk": 3,
        "Quick Breaking": 1,
        "Double Ore": 100,
        "Endure": 50,
        "Unbinding": 1,
        "Poison Reduction": 50,
        "Ricochet": 1,
        "Triple Ore": 100,
        "Mining": 4,
        "Knockback": 100,
        "Snow Day": 1,
        "Scatter": 1,
        "Sweeping": 1,
        "Looting": 4,
        "Life Heal": 100,
        "Mana Efficiency": 30,
        "Paralysis Chance": 50,
        "Cast Surge": 300,
        "Ore Explorer": 30, // MinerC and MinerH have minore and maxore assigned, waiting on code to implement maxValues
        "Reflect Chance": 15,
        "Coin Magnet": 2,
        "Spell Damage": 200,
        "Elite Damage": 10,
        "Boss Damage": 10,
        "Piercing": 2,
        "Poison Chance": 30,
        "Crit 3 Combo": 1,
        "Quad Ore": 100,
        "Max Barrier": 50,
        "Haste Damage": 10,
        "Self Damage": 10,
        "Spellcast Marty": 40,
        "Free Spellcast": 10,
        "Haste Chance": 5,
        "Quick Hit 3": 1,
        "Double Item Chance": 30,
        // "Mana %": 10,  minmana and maxmana have been assigned, waiting on code to implement maxValues
        "Crit 2 Combo": 1,
        "Knockback 3": 1,
        "Controller": 1,
        "Pull Chance": 100,
        "Stun Resistance": 100,
        "Paralysis 3": 1,
        "Quick Hit 2": 1,
        "Knockback Resistance": 100,
        "Water Breathing": 100,
        "Panic Resist": 50,
        "Recycle Throwable": 25,
        "Hp %": 20,
        "AOE": 2
    };
 
      // Extract minrarity and maxrarity from the constants
    let minrarity, maxrarity; // <-- define them outside first
 
    // Check if selected equipment exists in the equipmentStats object
    if (equipmentStats[selectedEquipment]) {
 
    // Check if selected equipment exists in the equipmentStats object
    if (equipmentStats[selectedEquipment]) {
        minrarity = equipmentStats[selectedEquipment].minrarity;
        maxrarity = equipmentStats[selectedEquipment].maxrarity;
    }}

    // Stats that convert to Roman Numerals
    const romanNumeralStats = [
        "Piercing",
        "Mining" //,
        // "AOE"
    ];

    // Stats with variable minimum stats as defined in equipmentStats
    const statMinCapKeys = {
        "Range": "minrange"
    };

    // Stats with variable maximum stats as defined in equipmentStats
    const statMaxCapKeys = {
        "Range": "maxrange",
        "Armor": "maxarmor",
        "Mana %": "maxmana",
        "Ore Explorer": "maxoreexplorer",
        "Critical Damage": "maxcritdmg"
    };
 
    // Loop through equipment stats
    equipment.forEach(item => {
        let minresult, maxresult;
 
        // Calculate minimum and maximum values
        let minCalc = (item.minx + ((item.maxx - item.minx) / 2 * rarity)) * (level ** 2) + 
                  item.mins + ((item.maxs - item.mins) / 2 * rarity);
        let maxCalc = (item.maxx + ((item.maxx - item.minx) / 2 * rarity)) * (level ** 2) + 
                  item.maxs + ((item.maxs - item.mins) / 2 * rarity);
 
    // Round values if the stat is in the roundStats list
    if (roundStats.includes(item.stat)) {
        minresult = Math.round(minCalc);
        maxresult = Math.round(maxCalc);
    } else { 
        // Keep decimal places for other stats
        minresult = (minCalc / 100).toFixed(2);
        maxresult = (maxCalc / 100).toFixed(2);
    }

    // Apply minimum caps
    const minCapKey = statMinCapKeys[item.stat];
    if (minCapKey && equipmentStats[selectedEquipment][minCapKey] !== undefined) {
        const minCap = equipmentStats[selectedEquipment][minCapKey];
        minresult = Math.max(minresult, minCap);
        maxresult = Math.max(maxresult, minCap);
    }

    // Apply maximum caps
    const maxCapKey = statMaxCapKeys[item.stat];
    if (maxCapKey && equipmentStats[selectedEquipment][maxCapKey] !== undefined) {
        const maxCap = equipmentStats[selectedEquipment][maxCapKey];
        minresult = Math.min(minresult, maxCap);
        maxresult = Math.min(maxresult, maxCap);
    }
 
    // Apply max value cap if the stat has a limit
    if (maxValues[item.stat] !== undefined) {
        minresult = Math.min(minresult, maxValues[item.stat]);
        maxresult = Math.min(maxresult, maxValues[item.stat]);
    }
 
    // Add percentage symbol if stat should display as percentage
    if (percentageStats.includes(item.stat)) {
        minresult += '%';
        maxresult += '%';
    }

    // Convert numeric values into Roman Numerals if assigned
    if (romanNumeralStats.includes(item.stat)) {
        minresult = toRoman(parseInt(minresult));
        maxresult = toRoman(parseInt(maxresult));
    }
 
    // Add result row to table
    const row = document.createElement('tr');
        let displayMin = minresult;
        let displayMax = maxresult;

        // Format numbers unless they already contain text (like %, or Roman numerals)
        if (!isNaN(minresult)) displayMin = formatNumber(minresult);
        if (!isNaN(maxresult)) displayMax = formatNumber(maxresult);

        row.innerHTML = `
            <td>${item.stat}</td>
            <td>${displayMin}</td>
            <td>${displayMax}</td>
            <td>${item.percentage}%</td>
        `;
        resultTableBody.appendChild(row);
    });
 
    // Append Rarity row at the bottom
    const minRarityName = getRarityNameByValue(minrarity);
    const maxRarityName = getRarityNameByValue(maxrarity);

    const rarityRow = document.createElement("tr");
    rarityRow.innerHTML = `
        <td>Rarity:</td>
        <td colspan="3">${minRarityName}  -  ${maxRarityName}</td>
    `;
    resultTableBody.appendChild(rarityRow);
}
  document.querySelectorAll('#equipment, #rarity, #level').forEach(el => {
    el.addEventListener('change', updateResultsHeader);
  });
</script>
  </div>

  <!-- Glacier Calculator -->
  <div id="glacierTab" class="tab-content" style="display: none;">
  <h2>Glacier Damage Calculator</h2>
 
  <table id="Build" class="calc-table"> 
  <colgroup>
    <col style="width: 55%;">
    <col style="width: 45%;">
  </colgroup>
    <tbody id="buildBody">
      <tr><td>
        <label for="LEVEL">Wizard Level:</label>
      </td><td>
        <select id="LEVEL">
			<!-- Generated from script -->
        </select>
    </td></tr>
 
    <tr><td>
      <label for="WEAPONMP">Weapon Mp:</label>
    </td><td>
      <input id="WEAPONMP" type="number" value="0">
    </td></tr>
 
    <tr><td>
      <label for="CASTSURGE">Cast Surge %:</label>
    </td><td>
      <input id="CASTSURGE" type="number" value="0">
    </td></tr>
 
    <tr><td>
      <label for="AVAILABLESP">Available Skill Points:</label>
    </td><td>
      <input id="AVAILABLESP" type="number" value="0">
    </td></tr>
 
    <tr><td>
      <label for="EMPOWERMENT">Empowerment:</label>
    </td><td>
      <select id="EMPOWERMENT">
        <option value="FALSE">FALSE</option>
        <option value="TRUE">TRUE</option>
      </select>
    </td></tr>
 
    <tr><td>
      <label for="MORGANA">Morgana 10% Buff:</label>
    </td><td>
      <select id="MORGANA">
        <option value="FALSE">FALSE</option>
        <option value="TRUE">TRUE</option>
      </select>
    </td></tr>
 
    <tr><td>
      <label for="SPELLDAMAGE">Bonus Spell Damage:</label>
    </td><td>
      <input id="SPELLDAMAGE" type="number" value="0">
    </td></tr>
 
    <tr><td>
      <label for="FORKMP">Fork Mp Upgrade</label>
    </td><td>
      <input id="FORKMP" type="number" value="0">
    </td></tr>
 
    <tr><td>
        <label for="ADVENTUREMP">Adventure Mp Ranks:</label>
      </td><td>
        <select id="ADVENTUREMP">
        <option value="0">0</option>
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
        </select>
      </td></tr>
 
    <tr><td>
        <label for="ADVENTURESD">Adventure Spell Damage Ranks:</label>
      </td><td>
        <select id="ADVENTURESD">
        <option value="0">0</option>
        <option value="1">1</option>
        <option value="2">2</option>
        <option value="3">3</option>
        <option value="4">4</option>
        <option value="5">5</option>
        </select>
      </td></tr>
 
    </tbody>
  </table>
 
  <table id="Results" class="calc-table">
	 <thead align="center">
		<tr><td colspan="2">
        <strong>Skill Point Distribution</strong>
      </td></tr>
	 </thead>
  <colgroup>
    <col style="width: 55%;">
    <col style="width: 45%;">
  </colgroup>
    <tbody id="resultsBody">
 
      <tr><td>
        Glacier
      </td><td id="glacierSp">
        <!-- AVAILABLESP-Y -->
      </td></tr>
 
      <tr><td>
        Magic Power+
      </td><td id="mpSp">
        <!-- Solve for Y -->
      </td></tr>
 
      <tr><td>
        Glacier Damage
      </td><td id="glacierDmg">
        <!-- Solve equation -->
      </td></tr>
 
      <tr><td>
        Mana Sacrifice
      </td><td id="manaSacrifice">
        <!-- Double Glacier Damage -->
      </td></tr>
 
    </tbody>
  </table>
  
  <script>

    // Generate LEVEL dropdown options dynamically
    const levelSelect = document.getElementById('LEVEL');
    for (let i = 15; i <= 110; i++) {
      const opt = document.createElement('option');
      opt.value = i;
      opt.textContent = i;
      levelSelect.appendChild(opt);
    }
 
    // Create helper function for equation
    function calculateGlacierDamage() {
      const LEVEL = parseInt(document.getElementById('LEVEL').value);
      const WEAPONMP = parseFloat(document.getElementById('WEAPONMP').value) || 0;
      const CASTSURGE = parseFloat(document.getElementById('CASTSURGE').value) || 0;
      const AVAILABLESP = parseInt(document.getElementById('AVAILABLESP').value);
      const EMPOWERMENT = document.getElementById('EMPOWERMENT').value === 'TRUE';
      const MORGANA = document.getElementById('MORGANA').value === 'TRUE';
      const SPELLDAMAGE = parseFloat(document.getElementById('SPELLDAMAGE').value) || 0;
      const FORKMP = parseFloat(document.getElementById('FORKMP').value) || 0;
      const ADVENTUREMP = parseInt(document.getElementById('ADVENTUREMP').value);
      const ADVENTURESD = parseInt(document.getElementById('ADVENTURESD').value);
 
      let bestY = 0;
      let bestDamage = 0;
 
      for (let Y = 0; Y <= AVAILABLESP; Y++) {
        const mpGain = 0.2 * LEVEL ** 2 + 3;
        const mpScale = 1 + Y * (EMPOWERMENT ? 10 : 5) / 100;
        const totalMP = (mpGain * mpScale + WEAPONMP);
 
        const glacierBonus = 1 + ((800 + (AVAILABLESP - Y) * 25) / 100)
          + (CASTSURGE + ADVENTURESD * 10 + SPELLDAMAGE) / 100;
 
        const extraBuff = 1 + ((MORGANA ? 10 : 0) + (ADVENTUREMP > 0 ? 20 + 5 * (ADVENTUREMP - 1) : 0) + FORKMP) / 100;
 
        const totalDamage = totalMP * glacierBonus * extraBuff;
 
        if (totalDamage > bestDamage) {
          bestDamage = totalDamage;
          bestY = Y;
        }
      }
 
      // Update table with results
      document.getElementById('glacierSp').textContent = AVAILABLESP - bestY;
      document.getElementById('mpSp').textContent = bestY;
      document.getElementById('glacierDmg').textContent = Math.round(bestDamage).toLocaleString();
      document.getElementById('manaSacrifice').textContent = Math.round(bestDamage * 2).toLocaleString();
    }
 
    // Attach event listeners to inputs
    document.querySelectorAll('select, input').forEach(el => {
      el.addEventListener('change', calculateGlacierDamage);
    });
  </script>
  </div>

  <!-- Archer Damage Optimizer -->
  <div id="archerTab" class="tab-content" style="display: none;">
  <title>Archer Damage Optimizer</title>
  <table class="calc-table">
    <tr><th>Output</th><th>Result</th></tr>
    <tr><td>Best SU (Range)</td><td id="bestSU"></td></tr>
    <tr><td>Best CU (Crit)</td><td id="bestCU"></td></tr>
    <tr><td>Best UP (Upgrade Damage)</td><td id="bestUP"></td></tr>
    <tr><td>Best UC (Upgrade Crit)</td><td id="bestUC"></td></tr>
    <tr><td>Max Damage</td><td id="maxDamage"></td></tr>
  </table>
    <script>
    function calculate() {
      const PL = +document.getElementById('pl').value;
      const SP = +document.getElementById('sp').value;
      const BD = +document.getElementById('bd').value;
      const BC = +document.getElementById('bc').value;
      const totalSlots = +document.getElementById('upgrades').value;
      const SD = 1;
      const SC = 1;

      let bestSU = 0;
      let bestCU = 0;
      let bestUP = 0;
      let bestUC = 0;
      let maxDamage = 0;

      const baseCore = 0.14 * PL * PL + 2;

      for (let UP = 0; UP <= totalSlots; UP++) {
        const UC = totalSlots - UP;
        const WD = BD * (1 + 0.25 * UP);
        const WC = BC * (1 + 0.25 * UC);

        for (let SU = 0; SU <= SP; SU++) {
          const CU = SP - SU;
          const rangeFactor = 1.05 + (SD * 5 * SU) / 100;
          const critFactor = 2 + ((SC * 5 * CU) + WC) / 100;
          const baseDamage = baseCore * rangeFactor + WD;
          const totalDamage = baseDamage * critFactor;

          if (totalDamage > maxDamage) {
            maxDamage = totalDamage;
            bestSU = SU;
            bestCU = CU;
            bestUP = UP;
            bestUC = UC;
          }
        }
      }

      document.getElementById('bestSU').textContent = bestSU;
      document.getElementById('bestCU').textContent = bestCU;
      document.getElementById('bestUP').textContent = bestUP;
      document.getElementById('bestUC').textContent = bestUC;
      document.getElementById('maxDamage').textContent = maxDamage.toFixed(2);
    }
  </script>
  </div>

  <!-- Scripts -->
  <script src="js/obatools.js"></script>
  <script src="js/equipment-data.js"></script>
</body>
</html>
